<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>openresty on Qin的自习室</title>
    <link>https://op-y.github.io/tags/openresty/</link>
    <description>Recent content in openresty on Qin的自习室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2023 14:42:00 +0800</lastBuildDate><atom:link href="https://op-y.github.io/tags/openresty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenResty上手</title>
      <link>https://op-y.github.io/openresty/</link>
      <pubDate>Tue, 05 Sep 2023 14:42:00 +0800</pubDate>
      
      <guid>https://op-y.github.io/openresty/</guid>
      <description>引子 没有想过要针对 Nginx、OpenResty、Kong 这类接入层中间件和系统专门写一些东西。最近因为DDDD的原因，需要回顾一下之前使用过的一些接入层开源系统以及做过的一些事情，所以简单的重新操作一下，做个记录。
OpenResty 是什么？ 官方首页上有比较官方的介绍
比较简单的理解：OpenResty 就是一个加强版的 Nginx，具体的加强之处就在于它给 Nginx 开发了一个 lua-nginx-module，这玩意儿在Nginx中直接集成了一个 Lua 解释器，让 Nginx 在处理请求的过程中可以执行内嵌的 Lua 脚本从而动态的实现一些 Nginx 原本很难做到的功能。
此外 OpenResty 官方还开发了很多可以直接使用的组件，用户可以直接拿来用；OpenResty 社区还有很多第三方的组件，方便用户开发自己的功能。
OpenResty 使用 安装 常见的操作系统都可以通过包管理工具直接安装对应的二进制版本。为了装逼有点参与感，我们还是源码编译安装。
我们的运行环境如下
 kernel: 5.10.0-15-amd64 系统发行版：Debian GNU/Linux 11  当前 OpenResty 的最新版本是 openresty-1.21.4.2，我们就选择整个版本，开始操作
cd ~ mkdir download &amp;amp;&amp;amp; cd download # 创建一个工作目录 wget https://openresty.org/download/openresty-1.21.4.2.tar.gz # 从官网下载源码 tar -zxvf openresty-1.21.4.2.tar.gz # 直接解压到当前目录 apt-get install libpcre3-dev libssl-dev perl make build-essential curl # 安装依赖 # 编译过程基本与nginx相同 # 我们指定了安装目录和一些需要安装的功能选项 cd openresty-1.</description>
    </item>
    
  </channel>
</rss>
